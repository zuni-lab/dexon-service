// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pools.sql

package db

import (
	"context"
)

const createPool = `-- name: CreatePool :one
INSERT INTO pools (id, token0_id, token1_id)
VALUES ($1, $2, $3)
RETURNING id, token0_id, token1_id, created_at
`

type CreatePoolParams struct {
	ID       string `json:"id"`
	Token0ID string `json:"token0_id"`
	Token1ID string `json:"token1_id"`
}

func (q *Queries) CreatePool(ctx context.Context, arg CreatePoolParams) (Pool, error) {
	row := q.db.QueryRow(ctx, createPool, arg.ID, arg.Token0ID, arg.Token1ID)
	var i Pool
	err := row.Scan(
		&i.ID,
		&i.Token0ID,
		&i.Token1ID,
		&i.CreatedAt,
	)
	return i, err
}

const getPool = `-- name: GetPool :one
SELECT id, token0_id, token1_id, created_at FROM pools
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPool(ctx context.Context, id string) (Pool, error) {
	row := q.db.QueryRow(ctx, getPool, id)
	var i Pool
	err := row.Scan(
		&i.ID,
		&i.Token0ID,
		&i.Token1ID,
		&i.CreatedAt,
	)
	return i, err
}

const getPoolByToken = `-- name: GetPoolByToken :one
SELECT id, token0_id, token1_id, created_at FROM pools
WHERE token0_id = $1 AND token1_id = $2 LIMIT 1
`

type GetPoolByTokenParams struct {
	Token0ID string `json:"token0_id"`
	Token1ID string `json:"token1_id"`
}

func (q *Queries) GetPoolByToken(ctx context.Context, arg GetPoolByTokenParams) (Pool, error) {
	row := q.db.QueryRow(ctx, getPoolByToken, arg.Token0ID, arg.Token1ID)
	var i Pool
	err := row.Scan(
		&i.ID,
		&i.Token0ID,
		&i.Token1ID,
		&i.CreatedAt,
	)
	return i, err
}

const getPools = `-- name: GetPools :many
SELECT id, token0_id, token1_id, created_at FROM pools
`

func (q *Queries) GetPools(ctx context.Context) ([]Pool, error) {
	rows, err := q.db.Query(ctx, getPools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pool{}
	for rows.Next() {
		var i Pool
		if err := rows.Scan(
			&i.ID,
			&i.Token0ID,
			&i.Token1ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const poolDetails = `-- name: PoolDetails :one
SELECT 
    pools.id,
    pools.token0_id,
    pools.token1_id,
    token0.name AS token0_name,
    token0.symbol AS token0_symbol,
    token0.decimals AS token0_decimals,
    token0.is_stable AS token0_is_stable,
    token1.name AS token1_name,
    token1.symbol AS token1_symbol,
    token1.decimals AS token1_decimals,
    token1.is_stable AS token1_is_stable
FROM pools
JOIN tokens AS token0 ON pools.token0_id = token0.id
JOIN tokens AS token1 ON pools.token1_id = token1.id
WHERE pools.id = $1
`

type PoolDetailsRow struct {
	ID             string `json:"id"`
	Token0ID       string `json:"token0_id"`
	Token1ID       string `json:"token1_id"`
	Token0Name     string `json:"token0_name"`
	Token0Symbol   string `json:"token0_symbol"`
	Token0Decimals int32  `json:"token0_decimals"`
	Token0IsStable bool   `json:"token0_is_stable"`
	Token1Name     string `json:"token1_name"`
	Token1Symbol   string `json:"token1_symbol"`
	Token1Decimals int32  `json:"token1_decimals"`
	Token1IsStable bool   `json:"token1_is_stable"`
}

func (q *Queries) PoolDetails(ctx context.Context, id string) (PoolDetailsRow, error) {
	row := q.db.QueryRow(ctx, poolDetails, id)
	var i PoolDetailsRow
	err := row.Scan(
		&i.ID,
		&i.Token0ID,
		&i.Token1ID,
		&i.Token0Name,
		&i.Token0Symbol,
		&i.Token0Decimals,
		&i.Token0IsStable,
		&i.Token1Name,
		&i.Token1Symbol,
		&i.Token1Decimals,
		&i.Token1IsStable,
	)
	return i, err
}
