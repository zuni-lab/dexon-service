// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pools.sql

package db

import (
	"context"
)

const createPool = `-- name: CreatePool :one
INSERT INTO pools (id, token0_id, token1_id)
VALUES ($1, $2, $3)
RETURNING id, token0_id, token1_id, created_at
`

type CreatePoolParams struct {
	ID       string `json:"id"`
	Token0ID string `json:"token0_id"`
	Token1ID string `json:"token1_id"`
}

func (q *Queries) CreatePool(ctx context.Context, arg CreatePoolParams) (Pool, error) {
	row := q.db.QueryRow(ctx, createPool, arg.ID, arg.Token0ID, arg.Token1ID)
	var i Pool
	err := row.Scan(
		&i.ID,
		&i.Token0ID,
		&i.Token1ID,
		&i.CreatedAt,
	)
	return i, err
}

const getPool = `-- name: GetPool :one
SELECT id, token0_id, token1_id, created_at FROM pools
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPool(ctx context.Context, id string) (Pool, error) {
	row := q.db.QueryRow(ctx, getPool, id)
	var i Pool
	err := row.Scan(
		&i.ID,
		&i.Token0ID,
		&i.Token1ID,
		&i.CreatedAt,
	)
	return i, err
}

const getPools = `-- name: GetPools :many
SELECT id, token0_id, token1_id, created_at FROM pools
`

func (q *Queries) GetPools(ctx context.Context) ([]Pool, error) {
	rows, err := q.db.Query(ctx, getPools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pool{}
	for rows.Next() {
		var i Pool
		if err := rows.Scan(
			&i.ID,
			&i.Token0ID,
			&i.Token1ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
