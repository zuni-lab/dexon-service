// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chat.sql

package db

import (
	"context"
)

const getChatThread = `-- name: GetChatThread :one
SELECT id, thread_id, user_address, thread_name, created_at, updated_at, is_deleted FROM chat_threads
WHERE thread_id = $1
AND user_address = $2
AND is_deleted = FALSE
`

type GetChatThreadParams struct {
	ThreadID    string `json:"threadId"`
	UserAddress string `json:"userAddress"`
}

func (q *Queries) GetChatThread(ctx context.Context, arg GetChatThreadParams) (ChatThread, error) {
	row := q.db.QueryRow(ctx, getChatThread, arg.ThreadID, arg.UserAddress)
	var i ChatThread
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.UserAddress,
		&i.ThreadName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getChatThreads = `-- name: GetChatThreads :many
SELECT id, thread_id, user_address, thread_name, created_at, updated_at, is_deleted FROM chat_threads
WHERE user_address = $1
AND is_deleted = FALSE
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetChatThreadsParams struct {
	UserAddress string `json:"userAddress"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) GetChatThreads(ctx context.Context, arg GetChatThreadsParams) ([]ChatThread, error) {
	rows, err := q.db.Query(ctx, getChatThreads, arg.UserAddress, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatThread{}
	for rows.Next() {
		var i ChatThread
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.UserAddress,
			&i.ThreadName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertChatThread = `-- name: UpsertChatThread :one
INSERT INTO chat_threads (thread_id, user_address, thread_name)
VALUES ($1, $2, $3)
ON CONFLICT (thread_id, user_address) WHERE NOT is_deleted
DO UPDATE SET 
    thread_name = EXCLUDED.thread_name,
    updated_at = NOW()
RETURNING id, thread_id, user_address, thread_name, created_at, updated_at, is_deleted
`

type UpsertChatThreadParams struct {
	ThreadID    string `json:"threadId"`
	UserAddress string `json:"userAddress"`
	ThreadName  string `json:"threadName"`
}

func (q *Queries) UpsertChatThread(ctx context.Context, arg UpsertChatThreadParams) (ChatThread, error) {
	row := q.db.QueryRow(ctx, upsertChatThread, arg.ThreadID, arg.UserAddress, arg.ThreadName)
	var i ChatThread
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.UserAddress,
		&i.ThreadName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
