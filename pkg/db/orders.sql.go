// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMatchedOrder = `-- name: GetMatchedOrder :one
SELECT id, parent_id, wallet, status, side, type, price, amount, twap_amount, twap_parts, partial_filled_at, filled_at, cancelled_at, created_at, pool_ids, slippage, twap_interval_seconds, twap_executed_times, twap_current_executed_times, twap_min_price, twap_max_price, deadline, rejected_at, signature FROM orders
WHERE (
        (side = 'BUY' AND type = 'LIMIT' AND price <= $1)
        OR (side = 'SELL' AND type = 'LIMIT' AND price >= $1)
        OR (side = 'BUY' AND type = 'STOP' AND price >= $1)
        OR (side = 'SELL' AND type 'STOP' AND price <= $1)
        OR (side = 'BUY' AND type = 'TWAP' AND price <= $1)
        OR (side = 'SELL' AND type = 'TWAP' AND price >= $1)
    )
    AND status IN ('PENDING', 'PARTIAL_FILLED')
ORDER BY created_at ASC
LIMIT 1
`

func (q *Queries) GetMatchedOrder(ctx context.Context, price pgtype.Numeric) (Order, error) {
	row := q.db.QueryRow(ctx, getMatchedOrder, price)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Wallet,
		&i.Status,
		&i.Side,
		&i.Type,
		&i.Price,
		&i.Amount,
		&i.TwapAmount,
		&i.TwapParts,
		&i.PartialFilledAt,
		&i.FilledAt,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.PoolIds,
		&i.Slippage,
		&i.TwapIntervalSeconds,
		&i.TwapExecutedTimes,
		&i.TwapCurrentExecutedTimes,
		&i.TwapMinPrice,
		&i.TwapMaxPrice,
		&i.Deadline,
		&i.RejectedAt,
		&i.Signature,
	)
	return i, err
}

const getOrdersByStatus = `-- name: GetOrdersByStatus :many
SELECT id, parent_id, wallet, status, side, type, price, amount, twap_amount, twap_parts, partial_filled_at, filled_at, cancelled_at, created_at, pool_ids, slippage, twap_interval_seconds, twap_executed_times, twap_current_executed_times, twap_min_price, twap_max_price, deadline, rejected_at, signature FROM orders
WHERE status = ANY($1::varchar[])
`

func (q *Queries) GetOrdersByStatus(ctx context.Context, status []string) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Wallet,
			&i.Status,
			&i.Side,
			&i.Type,
			&i.Price,
			&i.Amount,
			&i.TwapAmount,
			&i.TwapParts,
			&i.PartialFilledAt,
			&i.FilledAt,
			&i.CancelledAt,
			&i.CreatedAt,
			&i.PoolIds,
			&i.Slippage,
			&i.TwapIntervalSeconds,
			&i.TwapExecutedTimes,
			&i.TwapCurrentExecutedTimes,
			&i.TwapMinPrice,
			&i.TwapMaxPrice,
			&i.Deadline,
			&i.RejectedAt,
			&i.Signature,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByWallet = `-- name: GetOrdersByWallet :many
SELECT id, parent_id, wallet, status, side, type, price, amount, twap_amount, twap_parts, partial_filled_at, filled_at, cancelled_at, created_at, pool_ids, slippage, twap_interval_seconds, twap_executed_times, twap_current_executed_times, twap_min_price, twap_max_price, deadline, rejected_at, signature FROM orders
WHERE wallet = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByWalletParams struct {
	Wallet pgtype.Text `json:"wallet"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetOrdersByWallet(ctx context.Context, arg GetOrdersByWalletParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByWallet, arg.Wallet, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Wallet,
			&i.Status,
			&i.Side,
			&i.Type,
			&i.Price,
			&i.Amount,
			&i.TwapAmount,
			&i.TwapParts,
			&i.PartialFilledAt,
			&i.FilledAt,
			&i.CancelledAt,
			&i.CreatedAt,
			&i.PoolIds,
			&i.Slippage,
			&i.TwapIntervalSeconds,
			&i.TwapExecutedTimes,
			&i.TwapCurrentExecutedTimes,
			&i.TwapMinPrice,
			&i.TwapMaxPrice,
			&i.Deadline,
			&i.RejectedAt,
			&i.Signature,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrder = `-- name: InsertOrder :one
INSERT INTO orders (
    pool_ids, parent_id, wallet, status, side, type,
    price, amount, slippage, twap_interval_seconds,
    twap_executed_times, twap_current_executed_times,
    twap_min_price, twap_max_price, deadline,
    partial_filled_at, filled_at, rejected_at,
    cancelled_at, created_at)
VALUES ($1, $2, $3, $4, $5, $6,
        $7, $8, $9, $10,
        $11, $12, $13,
        $14, $15, $16,
        $17, $18, $19, $20)
RETURNING id, parent_id, wallet, status, side, type, price, amount, twap_amount, twap_parts, partial_filled_at, filled_at, cancelled_at, created_at, pool_ids, slippage, twap_interval_seconds, twap_executed_times, twap_current_executed_times, twap_min_price, twap_max_price, deadline, rejected_at, signature
`

type InsertOrderParams struct {
	PoolIds                  []string           `json:"pool_ids"`
	ParentID                 pgtype.Int8        `json:"parent_id"`
	Wallet                   pgtype.Text        `json:"wallet"`
	Status                   OrderStatus        `json:"status"`
	Side                     OrderSide          `json:"side"`
	Type                     OrderType          `json:"type"`
	Price                    pgtype.Numeric     `json:"price"`
	Amount                   pgtype.Numeric     `json:"amount"`
	Slippage                 pgtype.Float8      `json:"slippage"`
	TwapIntervalSeconds      pgtype.Int4        `json:"twap_interval_seconds"`
	TwapExecutedTimes        pgtype.Int4        `json:"twap_executed_times"`
	TwapCurrentExecutedTimes pgtype.Int4        `json:"twap_current_executed_times"`
	TwapMinPrice             pgtype.Numeric     `json:"twap_min_price"`
	TwapMaxPrice             pgtype.Numeric     `json:"twap_max_price"`
	Deadline                 pgtype.Timestamp   `json:"deadline"`
	PartialFilledAt          pgtype.Timestamptz `json:"partial_filled_at"`
	FilledAt                 pgtype.Timestamptz `json:"filled_at"`
	RejectedAt               pgtype.Timestamp   `json:"rejected_at"`
	CancelledAt              pgtype.Timestamptz `json:"cancelled_at"`
	CreatedAt                pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, insertOrder,
		arg.PoolIds,
		arg.ParentID,
		arg.Wallet,
		arg.Status,
		arg.Side,
		arg.Type,
		arg.Price,
		arg.Amount,
		arg.Slippage,
		arg.TwapIntervalSeconds,
		arg.TwapExecutedTimes,
		arg.TwapCurrentExecutedTimes,
		arg.TwapMinPrice,
		arg.TwapMaxPrice,
		arg.Deadline,
		arg.PartialFilledAt,
		arg.FilledAt,
		arg.RejectedAt,
		arg.CancelledAt,
		arg.CreatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Wallet,
		&i.Status,
		&i.Side,
		&i.Type,
		&i.Price,
		&i.Amount,
		&i.TwapAmount,
		&i.TwapParts,
		&i.PartialFilledAt,
		&i.FilledAt,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.PoolIds,
		&i.Slippage,
		&i.TwapIntervalSeconds,
		&i.TwapExecutedTimes,
		&i.TwapCurrentExecutedTimes,
		&i.TwapMinPrice,
		&i.TwapMaxPrice,
		&i.Deadline,
		&i.RejectedAt,
		&i.Signature,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET
    status = COALESCE($2, status),
    twap_current_executed_times = COALESCE($3, twap_current_executed_times),
    filled_at = COALESCE($4, filled_at),
    cancelled_at = COALESCE($5, cancelled_at),
    partial_filled_at = COALESCE($6, partial_filled_at),
    rejected_at = COALESCE($7, rejected_at)
WHERE id = $1
RETURNING id, parent_id, wallet, status, side, type, price, amount, twap_amount, twap_parts, partial_filled_at, filled_at, cancelled_at, created_at, pool_ids, slippage, twap_interval_seconds, twap_executed_times, twap_current_executed_times, twap_min_price, twap_max_price, deadline, rejected_at, signature
`

type UpdateOrderParams struct {
	ID                       int64              `json:"id"`
	Status                   OrderStatus        `json:"status"`
	TwapCurrentExecutedTimes pgtype.Int4        `json:"twap_current_executed_times"`
	FilledAt                 pgtype.Timestamptz `json:"filled_at"`
	CancelledAt              pgtype.Timestamptz `json:"cancelled_at"`
	PartialFilledAt          pgtype.Timestamptz `json:"partial_filled_at"`
	RejectedAt               pgtype.Timestamp   `json:"rejected_at"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.Status,
		arg.TwapCurrentExecutedTimes,
		arg.FilledAt,
		arg.CancelledAt,
		arg.PartialFilledAt,
		arg.RejectedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Wallet,
		&i.Status,
		&i.Side,
		&i.Type,
		&i.Price,
		&i.Amount,
		&i.TwapAmount,
		&i.TwapParts,
		&i.PartialFilledAt,
		&i.FilledAt,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.PoolIds,
		&i.Slippage,
		&i.TwapIntervalSeconds,
		&i.TwapExecutedTimes,
		&i.TwapCurrentExecutedTimes,
		&i.TwapMinPrice,
		&i.TwapMaxPrice,
		&i.Deadline,
		&i.RejectedAt,
		&i.Signature,
	)
	return i, err
}
