// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getOrdersByWallet = `-- name: GetOrdersByWallet :many
SELECT id, wallet, from_token, to_token, status, side, condition, price, filled_at, cancelled_at, created_at FROM orders
WHERE wallet = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByWalletParams struct {
	Wallet pgtype.Text `json:"wallet"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetOrdersByWallet(ctx context.Context, arg GetOrdersByWalletParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByWallet, arg.Wallet, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Wallet,
			&i.FromToken,
			&i.ToToken,
			&i.Status,
			&i.Side,
			&i.Condition,
			&i.Price,
			&i.FilledAt,
			&i.CancelledAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrder = `-- name: InsertOrder :one
INSERT INTO orders (wallet, from_token, to_token, side, condition, price, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, wallet, from_token, to_token, status, side, condition, price, filled_at, cancelled_at, created_at
`

type InsertOrderParams struct {
	Wallet    pgtype.Text        `json:"wallet"`
	FromToken string             `json:"from_token"`
	ToToken   string             `json:"to_token"`
	Side      OrderSide          `json:"side"`
	Condition OrderCondition     `json:"condition"`
	Price     pgtype.Numeric     `json:"price"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, insertOrder,
		arg.Wallet,
		arg.FromToken,
		arg.ToToken,
		arg.Side,
		arg.Condition,
		arg.Price,
		arg.CreatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Wallet,
		&i.FromToken,
		&i.ToToken,
		&i.Status,
		&i.Side,
		&i.Condition,
		&i.Price,
		&i.FilledAt,
		&i.CancelledAt,
		&i.CreatedAt,
	)
	return i, err
}
