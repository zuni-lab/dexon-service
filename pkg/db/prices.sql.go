// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: prices.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPrice = `-- name: CreatePrice :one
INSERT INTO prices (id, pool_id, price_usd)
VALUES ($1, $2, $3)
RETURNING id, pool_id, block_number, block_timestamp, sender, recipient, amount0, amount1, sqrt_price_x96, liquidity, tick, price_usd, timestamp_utc, created_at
`

type CreatePriceParams struct {
	ID       int64          `json:"id"`
	PoolID   string         `json:"pool_id"`
	PriceUsd pgtype.Numeric `json:"price_usd"`
}

func (q *Queries) CreatePrice(ctx context.Context, arg CreatePriceParams) (Price, error) {
	row := q.db.QueryRow(ctx, createPrice, arg.ID, arg.PoolID, arg.PriceUsd)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.PoolID,
		&i.BlockNumber,
		&i.BlockTimestamp,
		&i.Sender,
		&i.Recipient,
		&i.Amount0,
		&i.Amount1,
		&i.SqrtPriceX96,
		&i.Liquidity,
		&i.Tick,
		&i.PriceUsd,
		&i.TimestampUtc,
		&i.CreatedAt,
	)
	return i, err
}

const getMarketData = `-- name: GetMarketData :many
SELECT 
    time_bucket($1, created_at) AS bucket_time,
    FIRST(price_usd, created_at) AS open_price,
    MAX(price_usd) AS high_price,
    MIN(price_usd) AS low_price,
    LAST(price_usd, created_at) AS close_price,
    AVG(price_usd) AS avg_price,
    COUNT(*) AS number_of_trades
FROM prices
WHERE pool_id = $2
GROUP BY bucket_time
ORDER BY bucket_time DESC
`

type GetMarketDataParams struct {
	TimeBucket interface{} `json:"time_bucket"`
	PoolID     string      `json:"pool_id"`
}

type GetMarketDataRow struct {
	BucketTime     interface{} `json:"bucket_time"`
	OpenPrice      interface{} `json:"open_price"`
	HighPrice      interface{} `json:"high_price"`
	LowPrice       interface{} `json:"low_price"`
	ClosePrice     interface{} `json:"close_price"`
	AvgPrice       float64     `json:"avg_price"`
	NumberOfTrades int64       `json:"number_of_trades"`
}

func (q *Queries) GetMarketData(ctx context.Context, arg GetMarketDataParams) ([]GetMarketDataRow, error) {
	rows, err := q.db.Query(ctx, getMarketData, arg.TimeBucket, arg.PoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMarketDataRow{}
	for rows.Next() {
		var i GetMarketDataRow
		if err := rows.Scan(
			&i.BucketTime,
			&i.OpenPrice,
			&i.HighPrice,
			&i.LowPrice,
			&i.ClosePrice,
			&i.AvgPrice,
			&i.NumberOfTrades,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPriceByPoolID = `-- name: GetPriceByPoolID :one
SELECT id, pool_id, block_number, block_timestamp, sender, recipient, amount0, amount1, sqrt_price_x96, liquidity, tick, price_usd, timestamp_utc, created_at FROM prices
WHERE pool_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetPriceByPoolID(ctx context.Context, poolID string) (Price, error) {
	row := q.db.QueryRow(ctx, getPriceByPoolID, poolID)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.PoolID,
		&i.BlockNumber,
		&i.BlockTimestamp,
		&i.Sender,
		&i.Recipient,
		&i.Amount0,
		&i.Amount1,
		&i.SqrtPriceX96,
		&i.Liquidity,
		&i.Tick,
		&i.PriceUsd,
		&i.TimestampUtc,
		&i.CreatedAt,
	)
	return i, err
}

const getPrices = `-- name: GetPrices :many
SELECT id, pool_id, block_number, block_timestamp, sender, recipient, amount0, amount1, sqrt_price_x96, liquidity, tick, price_usd, timestamp_utc, created_at FROM prices
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetPricesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPrices(ctx context.Context, arg GetPricesParams) ([]Price, error) {
	rows, err := q.db.Query(ctx, getPrices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Price{}
	for rows.Next() {
		var i Price
		if err := rows.Scan(
			&i.ID,
			&i.PoolID,
			&i.BlockNumber,
			&i.BlockTimestamp,
			&i.Sender,
			&i.Recipient,
			&i.Amount0,
			&i.Amount1,
			&i.SqrtPriceX96,
			&i.Liquidity,
			&i.Tick,
			&i.PriceUsd,
			&i.TimestampUtc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
